import { app, BrowserWindow, ipcMain } from 'electron';
import './worker/share/service/BotWsServer';
import { BotWsServer } from './worker/share/service/BotWsServer';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const robot = require('robotjs');

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}
const botWsServer = new BotWsServer(1236);
const createWindow = (): void => {
  console.log('NODE_MODULE_VERSION:', process.versions.modules);

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 1400,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  // mainWindow.webContents.on('console-message', (event, level, message, line, sourceId) => {
  //   console.log('>', message);
  // });
  // and load the index.html of the app.
  mainWindow.loadURL('https://chat.openai.com');

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
  //
  //   mainWindow.webContents.on('did-finish-load', () => {
  //     // mainWindow.webContents.openDevTools();
  //     mainWindow.webContents.send('inject-scripts');
  //
  //     ipcMain.on('simulate-mouse-click', (event, { }) => {
  //       var mouse = robot.getMousePos();
  //       console.log(`robot.moveMouse(${mouse.x},${mouse.y});`)
  //     });
  //
  //     setTimeout(() => {
  //       robot.moveMouse(513,136);
  //       robot.mouseClick("down");
  //
  //       console.log("mouseClick 8")
  //     },5000)
  //
  //     // setTimeout(() => {
  //     //     robot.moveMouse(584,226);
  //     //     robot.mouseClick()
  //     //     console.log("mouseClick 9")
  //     // },10000)
  //     //
  //     // setTimeout(() => {
  //     //     robot.moveMouse(448,543);
  //     //     robot.mouseClick()
  //     //     robot.typeString("Hello World");
  //     //     console.log("mouseClick 10")
  //     // },11000)
  // //
  // //         setTimeout(() => {
  // //             // Speed up the mouse.
  // //             robot.setMouseDelay(2);
  // //
  // //             var twoPI = Math.PI * 2.0;
  // //             var screenSize = robot.getScreenSize();
  // //             var height = (screenSize.height / 2) - 10;
  // //             var width = screenSize.width;
  // //
  // //             for (var x = 0; x < width; x++)
  // //             {
  // //                 y = height * Math.sin((twoPI * x) / width) + height;
  // //                 robot.moveMouse(x, y);
  // //             }
  // //
  // //         }, 1000);
  // //
  // //         setTimeout(() => {
  // //
  // // // Type "Hello World".
  // //             robot.typeString("Hello World");
  // //
  // // // Press enter.
  // //             robot.keyTap("enter");
  // //
  // //         }, 3000);
  //
  //   });
  //

  botWsServer.start().catch(console.error);
  setTimeout(() => {
    // Speed up the mouse.
    robot.setMouseDelay(2);

    var twoPI = Math.PI * 2.0;
    var screenSize = robot.getScreenSize();
    var height = screenSize.height / 2 - 10;
    var width = screenSize.width;
    let y;
    for (var x = 0; x < width; x++) {
      y = height * Math.sin((twoPI * x) / width) + height;
      robot.moveMouse(x, y);
    }

    // robot.moveMouse(513, 136);
    // robot.mouseClick('down');

    console.log('mouseClick 8');
  }, 5000);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
  botWsServer.close();
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
